apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Values.db.appname }}-{{ .Values.node.image.tag }}-initconfig"
  namespace: {{ .Release.Namespace }}
data:
  init-pg.sql: |
    {{ .Values.db.initFile | nindent 4 }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.db.appname }}-{{ .Values.node.image.tag }}-deployment"
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.db.appname }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ .Values.db.appname }}
    spec:
      containers:
        - image: "{{ .Values.db.image.name }}:{{ .Values.db.image.tag }}"
          name: {{ .Values.db.appname }}
          env:
            - name: POSTGRES_USER
              value: {{ .Values.db.username }}
            - name: POSTGRES_PASSWORD
              value: {{ .Values.db.password }}
            - name: POSTGRES_DB
              value: {{ .Values.db.database }}
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: {{ .Values.db.port }}
              name: default
          resources:
            requests:
              cpu: 0.25
              memory: 64Mi
            limits:
              cpu: 0.5
              memory: 128Mi
          volumeMounts:
            - name: postgres-persistent-storage
              mountPath: /var/lib/postgresql/data/pgdata
              subPath: {{ .Values.db.appname }}
            - name: initialize-db-vol
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
      volumes:
        - name: initialize-db-vol
          configMap:
            name: "{{ .Values.db.appname }}-{{ .Values.node.image.tag }}-initconfig"
            items:
              - key: init-pg.sql
                path: init-pg.sql
        - name: postgres-persistent-storage
          persistentVolumeClaim:
            claimName: "{{ .Values.volume.pvName }}-claim"
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Values.db.appname }}-{{ .Values.node.image.tag }}-svc"
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  selector:
    app: {{ .Values.db.appname }}
  ports:
    - port: {{ .Values.db.port }}
      targetPort: {{ .Values.db.port }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{ .Values.db.appname }}-{{ .Values.node.image.tag }}-ingress"
  namespace: {{ .Release.Namespace }}
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
  - host: "{{ .Values.db.appname }}-{{ .Values.node.image.tag }}.k8s.beta.local"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: "{{ .Values.db.appname }}-{{ .Values.node.image.tag }}-svc"
            port:
              number: {{ .Values.db.port }}
